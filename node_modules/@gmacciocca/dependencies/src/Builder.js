import Container from "./Container";
import DEPENDENCY_TYPES from "./DependencyTypes";

const lateInjectionMethodName = "lateDependenciesInjection";

export default class Builder {
    constructor() {
        this._container = new Container;
    }

    add(...args) {
        return this._container.add(...args);
    }

    build() {
        return new Promise((resolve, reject) => {
            // Create (new) all Dependencies class types, and add them to the container.
            this._container.forEach(dep => {
                const { classType, initParams } = dep;
                dep.value = new classType(this._container.all, ...initParams);
            }, DEPENDENCY_TYPES.CLASS);

            // Give all dependency one last chance with a late dependency container injection.
            return this._container.callMethodOnDependencies(lateInjectionMethodName, this.container)
                .then(() => resolve(this._container.all))
                .catch(err => reject(err));
        });
    }

    callMethodOnDependencies(methodName, ...args) {
        this._container.callMethodOnDependencies(methodName, ...args);
    }
}
