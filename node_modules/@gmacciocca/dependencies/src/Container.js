export default class Container {
    constructor() {
        this._dependencies = {};
    }

    add(dependency) {
        this._dependencies[dependency.name] = dependency;
    }

    forEach(func, type) {
        Object.keys(this._dependencies)
        .filter(name => type !== undefined ? this._dependencies[name].type === type : true)
        .forEach(name => func(this._dependencies[name]));
    }

    get all() {
        const valueMap = {};
        Object.keys(this._dependencies).forEach(name => {
            if (this._dependencies[name].value) {
                valueMap[name] = this._dependencies[name].value;
            }
        });
        return valueMap;
    }

    callMethodOnDependencies(methodName, ...args) {
        const promiseArray = Object.keys(this._dependencies)
            .filter(name => this._hasFunction(this._dependencies[name].value, methodName))
            .map(name => {
                const { value } = this._dependencies[name];
                const ret = this._callFunction(value, methodName, ...args);
                return ret instanceof Promise ? ret : null;
            });
        return Promise.all(promiseArray);
    }

    _callFunction(obj, funcName, ...others) {
        return obj[funcName](...others);
    }

    _hasFunction(obj, funcName) {
        return obj && typeof obj[funcName] === "function";
    }
}
