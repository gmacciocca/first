import { Builder, DependencyClass } from "@gmacciocca/dependencies";
import { Localize } from "@gmacciocca/localize";
import Events from "./Events";
// import storeGen from "./storeGen";

var _instance;

export default class Application {
    constructor() {
        if (_instance) {
            throw Error("Application constructor: App is already instanciated.");
        }
        _instance = this;
        this._events = new Events();
        this._language = "en-us"; // Set default language.
        this._dependencies = new Builder();
        this._dependencies.add(new DependencyClass("localize", Localize, this._language));
        // storeGen(storeSchemas, this._dependencies);
    }

    static create(...args) {
        return new Application(...args);
    }

    destroy() {
        if (!_instance) {
            throw Error("Application destroy: App is not instanciated.");
        }
        _instance = null;
    }

    static get hasInstance() {
        return !!_instance;
    }

    static instance() {
        if (!_instance) {
            throw Error("Application instance: App is not instanciated.");
        }
        return _instance;
    }

    _bootstrapDependencies() {
        return this._dependencies.build()
        .then(container => {
            this._localize = container.localize;
        })
        .catch(err => {
            throw Error (`Application Bootstrap: error building dependencies container: ${err.toString()}`);
        });
    }

    _shutdownDependencies() {
        delete this._dependencies;
    }

    bootstrap() {
        return this._events.fireWait("appBeforeBootstrap")
        .then(() => this._bootstrapDependencies())
        .then(() => this._events.fireWait("appReady"))
        .catch(err => {
            throw Error (`Application Bootstrap: error: ${err.toString()}`);
        });
    }
    static bootstrap(...args) {
        return Application.instance().bootstrap(...args);
    }

    shutdown() {
        return this._events.fireWait("appBeforeShutdown")
        .then(() => this._shutdownDependencies())
        .then(() => this._events.fireWait("appShutdown"))
        .catch(err => {
            throw Error (`Application Shutdown: error: ${err.toString()}`);
        });
    }
    static shutdown(...args) {
        return Application.instance().shutdown(...args);
    }

    localize(...args) {
        return this._localize.localize(...args);
    }
    static localize(...args) {
        return Application.instance().localize(...args);
    }
}
