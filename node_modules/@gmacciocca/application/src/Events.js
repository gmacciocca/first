
const noop = () => {};

export default class Events {
    constructor() {
        this._on = {};
    }

    on(eventName, func) {
        this._on[event] = this._on[event] || {};
        this._on[event][func] = "on";
        return () => {
            delete this._on[event][func];
        };
    }

    once(event, func) {
        this._on[event] = this._on[event] || {};
        this._on[event][func] = "once";
        return () => {
            delete this._on[event][func];
        };
    }

    off(event, func) {
        this._on[event] = this._on[event] || {};
        delete this._on[event][func];
    }

    fire(event, ...args) {
        this._on[event] = this._on[event] || {};
        const promiseArray = Object.keys(this._on[event]).map(func => {
            "once" === this._on[event][func] ? this.off.bind(event, func) : noop;
            const ret = func(...args);
            return ret instanceof Promise ? ret : null;
        });
        return promiseArray;
    }

    fireWait(event, ...args) {
        return Promise.all(this.fire(event, ...args));
    }

    dispose() {

    }
}
